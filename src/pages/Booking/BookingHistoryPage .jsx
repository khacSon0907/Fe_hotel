import { useEffect, useState } from "react";
import { getBookingsByUserId } from "../../services/BookingService";
import { useSelector } from "react-redux";
import { updateBookingStatus } from "../../services/BookingService";
import "../../styles/pages/BookingHistoryPage.scss";

export default function BookingHistoryPage() {
  const user = useSelector((state) => state.user.user);
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);

  const handleCancell = async (bookingId, currentStatus) => {
    if (currentStatus === "CANCELLED") {
      alert("‚ùó Booking n√†y ƒë√£ b·ªã hu·ª∑ tr∆∞·ªõc ƒë√≥.");
      return;
    }

    const confirm = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën hu·ª∑ booking n√†y?");
    if (!confirm) return;

    try {
      const res = await updateBookingStatus(bookingId, "CANCELLED");
      if (res?.success) {
        alert("‚úÖ Hu·ª∑ booking th√†nh c√¥ng!");

        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch booking
        setBookings((prev) =>
          prev.map((item) =>
            item.bookingId === bookingId
              ? { ...item, status: "CANCELLED" }
              : item
          )
        );
      } else {
        alert("‚ùå Kh√¥ng th·ªÉ hu·ª∑ booking. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      console.error("L·ªói khi hu·ª∑ booking:", error);
      alert("‚ùå L·ªói server. Kh√¥ng th·ªÉ hu·ª∑ booking.");
    }
  };

  useEffect(() => {
    if (user?.id) {
      getBookingsByUserId(user.id)
        .then((res) => {
          if (res?.success) {
            setBookings(res.data);
          } else {
            alert("‚ùå Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng.");
          }
        })
        .catch((err) => {
          console.error("L·ªói khi l·∫•y booking:", err);
          alert("‚ùå L·ªói server.");
        })
        .finally(() => setLoading(false));
    }
  }, [user]);

  if (loading) return <div className="loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>;

  return (
    <div className="booking-history-container">
      <h2>L·ªäCH S·ª¨ ƒê·∫∂T PH√íNG</h2>

      {bookings.length === 0 ? (
        <p>üîç B·∫°n ch∆∞a c√≥ ƒë·∫∑t ph√≤ng n√†o.</p>
      ) : (
        <table className="booking-table">
          <thead className="title">
            <tr>
              <th>Kh√°ch s·∫°n</th>
              <th>ƒê·ªãa ch·ªâ</th>
              <th>Ph√≤ng</th>
              <th>Lo·∫°i ph√≤ng</th>
              <th>Ng√†y nh·∫≠n</th>
              <th>Ng√†y tr·∫£</th>
              <th>Thanh to√°n</th>
              <th>Ghi ch√∫</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {bookings.map((item) => (
              <tr key={item.bookingId}>
                <td>{item.hotelName}</td>
                <td>{item.hotelAddress}</td>
                <td>{item.roomName}</td>
                <td>{item.roomType}</td>
                <td>{new Date(item.checkInDate).toLocaleString()}</td>
                <td>{new Date(item.checkOutDate).toLocaleString()}</td>
                <td>{item.paymentMethod}</td>
                <td>{item.note || "Kh√¥ng c√≥"}</td>
                <td>{item.status}</td>
                <td>
                  <button
                    className="btn-cancell"
                    onClick={() => handleCancell(item.bookingId,item.status )}
                    disabled={item.status === "CANCELLED"}
                  >
                    {item.status === "CANCELLED" ? "ƒê√£ hu·ª∑" : "Hu·ª∑"}
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
