import React, { useState, useEffect } from "react";
import "../../styles/pages/createRoom.scss";
import {
  getAllHotels,
  getAllRooms,
  createRoom,
  updateRoom,
  deleteRoom,
} from "../../services/hotelService";

export default function CreateRoom() {
  const [roomData, setRoomData] = useState({
    hotelId: "",
    roomType: "",
    nameRoom: "",
    pricePerNight: "",
    maxGuests: "",
    isAvailable: true,
    description: "",
    roomImage: null,
  });

  const [imagePreview, setImagePreview] = useState(null);
  const [hotels, setHotels] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [isEditing, setIsEditing] = useState(false);
  const [editingRoomId, setEditingRoomId] = useState(null);

  useEffect(() => {
    fetchHotels();
    fetchRooms();
  }, []);

  const fetchHotels = async () => {
    try {
      const response = await getAllHotels();
      if (response.success) setHotels(response.data);
    } catch (error) {
      console.error("L·ªói g·ªçi API hotels:", error);
    }
  };

  const fetchRooms = async () => {
    try {
      const response = await getAllRooms();
      if (response.success) setRooms(response.data);
    } catch (error) {
      console.error("L·ªói g·ªçi API rooms:", error);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setRoomData((prev) => ({ ...prev, [name]: value }));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setRoomData((prev) => ({ ...prev, roomImage: file }));
    if (file) setImagePreview(URL.createObjectURL(file));
  };

  const resetForm = () => {
    setRoomData({
      hotelId: "",
      roomType: "",
      nameRoom: "",
      pricePerNight: "",
      maxGuests: "",
      isAvailable: true,
      description: "",
      roomImage: null,
    });
    setImagePreview(null);
    setIsEditing(false);
    setEditingRoomId(null);
  };

    const handleSubmit = async () => {
    const formData = new FormData();
    const { roomImage, ...roomJson } = roomData;
    formData.append("room", JSON.stringify(roomJson));
    if (roomImage) {
      formData.append("imageFile", roomImage);
    }

    try {
      let response;
      if (isEditing) {
        response = await updateRoom(editingRoomId, formData);
      } else {
        response = await createRoom(formData);
      }

      if (response.success) {
        alert(
          isEditing ? "C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng!" : "T·∫°o ph√≤ng th√†nh c√¥ng!"
        );
        resetForm();
        fetchRooms();
      } else {
        alert(
          response.message ||
            (isEditing
              ? "C·∫≠p nh·∫≠t ph√≤ng th·∫•t b·∫°i!"
              : "T·∫°o ph√≤ng th·∫•t b·∫°i!")
        );
      }
    } catch (error) {
      console.error("L·ªói khi g·ª≠i d·ªØ li·ªáu:", error);
      alert(
        error?.response?.data?.message ||
          "C√≥ l·ªói x·∫£y ra khi g·ª≠i d·ªØ li·ªáu."
      );
    }
  };

  const handleEdit = (room) => {
    setRoomData({
      hotelId: room.hotelId,
      roomType: room.roomType,
      nameRoom: room.nameRoom,
      pricePerNight: room.pricePerNight,
      maxGuests: room.maxGuests,
      isAvailable: room.isAvailable,
      description: room.description,
      roomImage: null,
    });

    if (room.roomImage) {
      setImagePreview(room.roomImage);
    }

    setIsEditing(true);
    setEditingRoomId(room.roomId);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const handleCancelEdit = () => {
    resetForm();
  };

  const handleDelete = async (roomId) => {
    if (!window.confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën xo√° ph√≤ng n√†y?")) return;
    try {
      const response = await deleteRoom(roomId);
      if (response.success) {
        alert("Xo√° ph√≤ng th√†nh c√¥ng!");
        fetchRooms();
      } else {
        alert("Xo√° ph√≤ng th·∫•t b·∫°i!");
      }
    } catch (error) {
      console.error("L·ªói xo√° ph√≤ng:", error);
      alert("C√≥ l·ªói x·∫£y ra khi xo√° ph√≤ng.");
    }
  };

  return (
    <div className="create-room-container">
      <div className="form-section">
        <h2>{isEditing ? "S·ª≠a Ph√≤ng" : "T·∫°o Ph√≤ng M·ªõi"}</h2>

        <div className="form-compact">
          <div className="form-row">
            <select
              name="hotelId"
              value={roomData.hotelId}
              onChange={handleChange}
            >
              <option value="">Ch·ªçn kh√°ch s·∫°n</option>
              {hotels.map((hotel) => (
                <option key={hotel.hotelId} value={hotel.hotelId}>
                  {hotel.hotelName} ‚Äì {hotel.city}, {hotel.district}
                </option>
              ))}
            </select>

            <select
              name="roomType"
              value={roomData.roomType}
              onChange={handleChange}
            >
              <option value="">Ch·ªçn lo·∫°i ph√≤ng</option>
              <option value="Ph√≤ng Ti√™u Chu·∫©n">Ph√≤ng Ti√™u Chu·∫©n</option>
              <option value="Ph√≤ng Cao C·∫•p">Ph√≤ng Cao C·∫•p</option>
              <option value="Ph√≤ng VIP">Ph√≤ng VIP</option>
            </select>

            <input
              type="text"
              name="nameRoom"
              placeholder="T√™n ph√≤ng"
              value={roomData.nameRoom}
              onChange={handleChange}
            />
          </div>

          <div className="form-row">
            <input
              type="number"
              name="pricePerNight"
              placeholder="Gi√°/ƒë√™m (VNƒê)"
              value={roomData.pricePerNight}
              onChange={handleChange}
            />
            <input
              type="number"
              name="maxGuests"
              placeholder="S·ªë kh√°ch t·ªëi ƒëa"
              value={roomData.maxGuests}
              onChange={handleChange}
            />
            <select
              name="isAvailable"
              value={roomData.isAvailable}
              onChange={handleChange}
            >
              <option value={true}>C√≤n tr·ªëng</option>
              <option value={false}>H·∫øt ph√≤ng</option>
            </select>
          </div>

          <div className="form-row">
            <textarea
              name="description"
              placeholder="M√¥ t·∫£ ph√≤ng"
              value={roomData.description}
              onChange={handleChange}
              rows={2}
            ></textarea>
            <label className="upload-label">
              <input type="file" onChange={handleImageChange} />
              <span>
                üì∑{" "}
                {roomData.roomImage
                  ? `${roomData.roomImage.name.substring(0, 15)}...`
                  : "Ch·ªçn ·∫£nh"}
              </span>
            </label>
          </div>

          {imagePreview && (
            <div className="image-preview">
              <img src={imagePreview} alt="·∫¢nh xem tr∆∞·ªõc" />
            </div>
          )}

          <div className="form-actions">
            <button className="submit-btn" onClick={handleSubmit}>
              {isEditing ? "C·∫≠p Nh·∫≠t" : "Th√™m M·ªõi"}
            </button>
            {isEditing && (
              <button className="cancel-btn" onClick={handleCancelEdit}>
                H·ªßy
              </button>
            )}
          </div>
        </div>
      </div>

      <div className="table-section">
        <h3>Danh s√°ch ph√≤ng ({rooms.length})</h3>
        <div className="table-wrapper">
          <table>
            <thead>
              <tr>
                <th>T√™n ph√≤ng</th>
                <th>H√¨nh ·∫¢nh</th>
                <th>Kh√°ch S·∫°n</th>
                <th>Lo·∫°i</th>
                <th>Gi√°/ƒë√™m</th>
                <th>Kh√°ch</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {rooms.map((room) => {
                const hotel = hotels.find((h) => h.hotelId === room.hotelId);
                return (
                  <tr
                    key={room.roomId}
                    className={editingRoomId === room.roomId ? "editing" : ""}
                  >
                    <td className="room-name">{room.nameRoom}</td>
                    <td className="room-image">
                      <img src={room.roomImage} alt={room.nameRoom} />
                    </td>
                    <td>{hotel ? hotel.hotelName : "Kh√¥ng r√µ"}</td>
                    <td>
                      <span
                        className={`room-type ${room.roomType.toLowerCase()}`}
                      >
                        {room.roomType}
                      </span>
                    </td>
                    <td className="price">
                      {Number(room.pricePerNight).toLocaleString()} VNƒê
                    </td>
                    <td>{room.maxGuests}</td>
                    <td>
                      <span
                        className={`status ${
                          room.isAvailable ? "available" : "unavailable"
                        }`}
                      >
                        {room.isAvailable ? "C√≤n tr·ªëng" : "H·∫øt ph√≤ng"}
                      </span>
                    </td>
                    <td className="actions">
                      <button className="edit" onClick={() => handleEdit(room)}>
                        ‚úèÔ∏è S·ª≠a
                      </button>
                      <button
                        className="delete"
                        onClick={() => handleDelete(room.roomId)}
                      >
                        üóëÔ∏è Xo√°
                      </button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
