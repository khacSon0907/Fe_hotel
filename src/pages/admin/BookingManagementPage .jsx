import { useEffect, useState } from "react";
import { getAllBookingsForAdmin, updateBookingStatus } from "../../services/BookingService";
import "../../styles/pages/BookingManagementPage.scss";

export default function BookingManagementPage() {
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchBookings();
  }, []);

  const fetchBookings = async () => {
    try {
      const res = await getAllBookingsForAdmin();
      if (res?.success) {
        setBookings(res.data);
      } else {
        alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·∫∑t ph√≤ng.");
      }
    } catch (err) {
      console.error("L·ªói khi l·∫•y d·ªØ li·ªáu booking:", err);
      alert("ƒê√£ x·∫£y ra l·ªói server!");
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateStatus = async (bookingId, newStatus) => {
    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh: ${newStatus}?`)) return;

    try {
      const res = await updateBookingStatus(bookingId, newStatus);
      if (res?.success) {
        alert("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng");
        fetchBookings(); // Reload l·∫°i danh s√°ch sau c·∫≠p nh·∫≠t
      } else {
        alert("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i");
      }
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      alert("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
    }
  };

  if (loading) return <div className="booking-loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>;

  return (
    <div className="booking-admin-container">
      <h2 className="title">üìã Qu·∫£n L√Ω ƒê·∫∑t Ph√≤ng</h2>

      {bookings.length === 0 ? (
        <p>Kh√¥ng c√≥ ƒë·∫∑t ph√≤ng n√†o ƒë∆∞·ª£c t√¨m th·∫•y.</p>
      ) : (
        <table className="booking-admin-table">
          <thead>
            <tr>
              <th>M√£</th>
              <th>Kh√°ch s·∫°n</th>
              <th>Ph√≤ng</th>
              <th>Ng∆∞·ªùi ƒë·∫∑t</th>
              <th>Nh·∫≠n ph√≤ng</th>
              <th>Tr·∫£ ph√≤ng</th>
              <th>Thanh to√°n</th>
              <th>Ghi ch√∫</th>
              <th>Tr·∫°ng th√°i</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {bookings.map((item) => (
              <tr key={item.bookingId}>
                <td>{item.bookingId.slice(-6)}</td>
                <td>
                  {item.hotelName} <br />
                  <small>{item.hotelAddress}</small>
                </td>
                <td>
                  {item.roomName} <br />
                  <small>{item.roomType}</small>
                </td>
                <td>{item.userName}</td>
                <td>{new Date(item.checkInDate).toLocaleString()}</td>
                <td>{new Date(item.checkOutDate).toLocaleString()}</td>
                <td>{item.paymentMethod}</td>
                <td>{item.note || "Kh√¥ng c√≥"}</td>
                <td>
                  <span className={`status ${item.status.toLowerCase()}`}>
                    {item.status}
                  </span>
                </td>
                <td>
                  <select
                    className="status-dropdown"
                    value={item.status}
                    onChange={(e) => handleUpdateStatus(item.bookingId, e.target.value)}
                    disabled={["CANCELLED", "COMPLETED"].includes(item.status)}
                  >
                    <option value="PENDING">üïí Ch·ªù x·ª≠ l√Ω</option>
                    <option value="CONFIRMED">‚úÖ ƒê√£ x√°c nh·∫≠n</option>
                    <option value="CANCELLED">‚ùå ƒê√£ hu·ª∑</option>
                    <option value="COMPLETED">üì¶ Ho√†n t·∫•t</option>
                  </select>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
